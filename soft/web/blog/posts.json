{
	"posts": 
	{
		"beat_detection": {
			"title": "<em>Beating</em> around the bush",
			"subtitle": "",
			"exerpt": "",
			"postdate": "072213w.svg",
			"color": "light-green",
			"icon": "processingicon.svg",
			"body": "<h2>Predictive Processing Beat Detection</h2><p style='text-align:justify;'><span style='margin-left:60px;'></span>Several years ago, I had a borderline obsession with audio analysis algorithms and beat detection. At the time, I was building many Arduino LED projects, and using the algorithms to power 'party' effects; the better the algorithm, the better the effects became. After a while, my interests moved on, and the code sat in a dusty file on my hard drive for nearly two years. Not too long ago, <a href='http://www.frogdesign.com' target='_blank'>Frog Design</a> contacted me, asking to use the algorithm that I had developed. After pulling up the files, I decided that I could do better: the coding began.<br><br><span style='margin-left:60px;'></span>I used the open source language “Processing” (<a href='www.processing.org' target='_blank'>www.processing.org</a>) to write a better, highly accurate and predictive beat analysis routine. Frog Design featured my algorithm at the SxSWi kickoff party in 2013. They integrated my code with Adobe AS3 in order to precisely time the slide changes for a crowdsourced DJ system.</p><p style='text-align:justify;'><br><b>NOTE: This sketch represents countless hours of labor, it is free for non-commercial use, but please do me a favor by linking back to this site and crediting my work.</b><br></p><a href='./dl/beatdetection.zip'><div><img src='./img/download.svg' style='width:60px;'><h4>Download Source</h4></div></a><a class='scroll' href='#usage'><h6 style='margin-bottom:15px;'>usage instructions</h6></a> <p>Check out the GitHub repo: <a href='https://github.com/kctess5/Processing-Beat-Detection'>https://github.com/kctess5/Processing-Beat-Detection</a></p> <p style='text-align:justify;'>It helps you out, or you do something cool with it, <a href='mailto:coreyhwalsh@gmail.com?Subject=Processing%20Beat%20Detection' target='_top'>let me know!</a> I love to hear feedback!<br></p><p style='text-align:justify;'><br><span style='margin-left:60px;'></span>The program uses adaptive thresholds to detect “beats” in many (30) bands, and then uses another adaptive threshold to separate a beat from sounds. The video below demonstrates the program in action. The time between registered beats is monitored (graphed on the top) and used to predict when the next beat will occur, greatly improving accuracy. When the background color changes, a beat has been detected.<br></p><div class='video-container'><iframe width='460' title='YouTube video player' src='//www.youtube.com/embed/QVX2F6kUaRQ?HD=1;rel=0;showinfo=0;autohide=1;' height='289' frameborder='0'></iframe></div><p style='text-align:justify;'><span style='margin-left:60px;'></span>The bottom part of the video shows the Fast Fourier Transform (FFT) with thresholds and averages. The top is a graph showing time between beats, time is on the x axis. As you can see, the program finds the tempo very quickly, especially in songs with pronounced beats.<br></p><div id='usage'><h3><b> usage </b></h3><p style='text-align:justify;'>When you <a href='./dl/beatdetection.zip'>download</a> the code, there are a few things you have to do to get it up and running: <br><br>1) Ensure that the .pde file is enclosed in a folder of the same name ('beatdetection')<br><br>2) If you don't have Processing, you will need to <a href='http://processing.org' target='_blank'>install it</a><br><br>3) If you don't have Soundflower, <a href='http://soundflower.en.softonic.com/mac' target='_blank'>install it</a>. Sorry non-mac users, you will either have to use the built in microphone or figure out some higher quality input or Soundflower alternative. Once you have done that, set both computer audio input and output to 'Soundflower (2ch),' this is done through the 'Sound' menu on System Preferences. If you did it correctly, when you play some music you should not hear anything. Go into the Soundflower settings by opening Soundflower and setting the output to the correct system audio output, and you should be able to hear again.<br><br>4) You may or may not need to install some packages for the sketch to run, if so, <a href='http://wiki.processing.org/w/How_to_Install_a_Contributed_Library' target='_blank'>look here</a><br><br>5) Run the sketch, assuming everything is working it should look a lot like the above video. Play your favorite songs through your computer and enjoy!</p></div><div class='code-container'><iframe src='./dl/beatdetection.pde' frameborder='0'></iframe></div>" 
		},
		"internet_basics": {
			"title": "Metaphors, and the Internet",
			"subtitle": "",
			"exerpt": "",
			"postdate": "071313w.svg",
			"color": "light-blue",
			"icon": "interneticon3.svg",
			"body": "<h2>Basics of the Internet</h2><p style='text-align:justify;'><span style='margin-left:60px;'></span>To your average programmer, the ways of the internet probably seem like common sense. However, to the non-programmers out there, the inner workings of the web can be baffling; so let's take a trip down metaphor lane to avoid any potential confusion. <br><br><span style='margin-left:60px;'></span><b>In a sense, an 'internet' has existed for hundreds of years,</b> it has just gotten a whole lot faster as of late: If you are like any other person from the late 1800's, you have probably used a mail order catalogue, but let's break down what's actually going on here.<br><br><span style='margin-left:60px;'></span>On one particularly fine afternoon, Ethel was lounging around the house when she decided to pull out her Sears catalogue to buy the fancy new electric radio she’d been eyeing. Little did she know, she simultaneously became the subject of a beautiful extended metaphor. <br><br><span style='margin-left:60px;'></span>Ethel filled out and mailed her order form, <i>violently</i> anxious for her delivery. The mail man collected her letter, giving Ethel a knowing nod as he drove away, and that letter made it’s way to the Sears headquarters in Chicago for processing. A worker read the order, walked around the Sears warehouse to gather the necessaries, and prepared the product for shipping.<br><br><span style='margin-left:60px;'></span>The mail man returned and the radio began it’s trek back to Ethel. A few days later, with a squeak of joy, Ethel noticed a package on her doorstep. She ripped apart the packaging, and began to follow the instructions to set up the radio set. In no time, Louis Armstrong rang throughout the room, and Ethel sat back to admire her handiwork.<br><br><i>Ethel is not real.</i> <br><br><span style='margin-left:60px;'></span>Ethel is an <b>internet browser,</b> Sears is a <b>server,</b> the product catalogue is a <b>search engine,</b> and the postal service is the system of <b>modems, routers,</b> and so on that connect you to a server. <br><br><span style='margin-left:60px;'></span>Everything that Ethel did is called <b>“client side,”</b> and everything that Sears did is called <b>“server side.”</b> Client side “scripts” are instructions that your browser completes (often written with the language <b>JavaScript</b>), and server side scripts are instructions that the server you're communicating with completes (often written with the language <b>PHP</b>). <br><br><span style='margin-left:60px;'></span>Your computer and the servers <b>‘hosting’</b> a website you access communicate in very basic text files, which are merely descriptions of what the browser should draw on the screen; along the lines of “make a big red box that says ‘hello world’ inside of it.” These visual instructions are written with <b>HyperText Markup Language (HTML)</b> which is structure, and <b>Cascading Style Sheets (CSS)</b>, which is the styling of that structure.<br><br><span style='margin-left:60px;'></span>In summation:<br><br><span style='margin-left:60px;'></span><b>HTML:</b> The structure of anything on the web. It’s a description of what a page should look like.<br><br><span style='margin-left:60px;'></span><b>CSS:</b> The style of the structure, works in conjunction with HTML.<br><br><span style='margin-left:60px;'></span><b>PHP:</b> A server side scripting language, used to pull information from a database, process forms, anything on the server.<br><br><span style='margin-left:60px;'></span><b>JavaScript:</b> A client side scripting language, executed by an internet browser to do things like animate onscreen elements, define what happens when a button is pressed, etc.<br><br><span style='margin-left:60px;'></span><b>Server:</b> A computer that stores files and sends them to your browser when requested, as well as execute server side scripts.<br><br><span style='margin-left:60px;'></span><b>Browser:</b> A program that decodes HTML/CSS and executes other instructions from client side scripts.<br><br>Further reading:<br><a href='http://computer.howstuffworks.com/internet/basics/internet.htm' target='_blank'>HowStuffWorks: How does the internet work?</a><br><a href='http://en.wikipedia.org/wiki/Web_development' target='_blank'>Wikipedia: Web Development</a></p>" 
		},
		"design": {
			"title": "Quandaries of Design",
			"subtitle": "Not to be forgotten.",
			"exerpt": "",
			"postdate": "070813w.svg",
			"color": "dark-green",
			"icon": "designemceeicon2.svg",
			"body": "<div class='row'><div class='small-4 small-offset-4 columns'><img src='./img/buildicon.svg' style='width:100%; margin-top:80px;'><h2 style='margin-bottom:100px; margin-top:20px;'>Coming Soon!</h2></div></div>"
		},
		"site_sucker": {
			"title": "View source? I don't think so",
			"subtitle": "",
			"exerpt": "",
			"postdate": "070213w.svg",
			"color": "dark-blue",
			"icon": "vacuumicon.svg",
			"body": "<h2>Site Sucker</h2><p style='text-align:justify;'><span style='margin-left:60px;'></span>People like to check up on other people, and web designers are no exception. When I see a beautiful website, the first thing that I usually do is view page source to see if the underlying code is similarly beautiful.<br><br><span style='margin-left:60px;'></span>Step one in almost every website design is to look at other people's work, just to get a feel for the functionality and design principles that are desired. While doing this, I happened upon a great free tool that makes tinkering with and understanding other people's code an absolute breeze, and hopefully it can help you out as well. <br><br><span style='margin-left:60px;'></span>It is called <a href='http://sitesucker.us/home.html' target='_blank'>Site Sucker</a>, and let me tell you, it doesn't suck. It allows you to download entire websites, including the file structure. Why would you do this you might ask? Rather navigating thousands of lines of code in an internet browser, you can just host the whole site locally and use your favorite code editor like <a href='http://www.sublimetext.com' target='_blank'>Sublime Text</a>! With a virtual server like <a href='http://www.apachefriends.org/en/xampp.html' target='_blank'>xampp</a> all you have to do is put the downloaded files into xampp's root directory, then you can view it in your browser like a normal website, except that you can edit any part of the code.<br><br></p><p style='text-align:center;'>Download it from the website here:</p><a href='http://sitesucker.us/home.html' target='_blank'><div><img src='./img/download.svg' style='width:60px;'><h4>Site Sucker</h4></div></a><p style='text-align:center; font-size:15px; margin-bottom:60px;'>If it helps you, be sure to give a shoutout to the creater who gave up hours of time for free!</p><p style='text-align:justify;'><span style='margin-left:60px;'></span>Once you finish downloading, install and launch the app. Then to use it, just type in the domain of the website that you want to download, click 'Download,' wait a minute or two, then check your downloads folder! Move the downloaded folder into your virtual server's root directory, then go to http://localhost/[insert folder name here].<br><br><span style='margin-left:60px;'></span>You should be warned that because sitesucker is pulling the files from the servers responses, server side scripts will <i>not</i> be 'sucked.' Generally with little to no effort you can get any normal sized website running locally in just a minute or two.<br></p><p style='text-align:center; '>Share and enjoy!</p>" 
		}
	}
}


